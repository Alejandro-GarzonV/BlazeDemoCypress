"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressEsbuildPreprocessor = exports.cypressPreprocessor = exports.esbuildPreprocessorAdapter = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const bundles = new Map();
const watching = new Set();
function esbuildPreprocessorAdapter(options) {
    var _a;
    const build = (_a = options === null || options === void 0 ? void 0 : options.esbuildBuildFunction) !== null && _a !== void 0 ? _a : require("esbuild").build;
    return {
        build({ entryPoints, outfile }) {
            var _a;
            return build({
                entryPoints,
                outfile,
                resolveExtensions: [".ts", ".js", ".mjs", ".json"],
                minify: false,
                bundle: true,
                ...((_a = options === null || options === void 0 ? void 0 : options.esbuildOptions) !== null && _a !== void 0 ? _a : {}),
            }).then(() => undefined);
        },
        options: options !== null && options !== void 0 ? options : {},
    };
}
exports.esbuildPreprocessorAdapter = esbuildPreprocessorAdapter;
function cypressPreprocessor(adapter) {
    return (file) => {
        const filePath = file.filePath;
        let promise = bundles.get(filePath);
        if (promise) {
            return promise;
        }
        const outfile = path.extname(file.outputPath) === ".js"
            ? file.outputPath
            : `${file.outputPath}.js`;
        const entryPoints = [filePath].concat(adapter.options.additionalEntries || []);
        if (file.shouldWatch) {
            watch(filePath, {
                onInit: (watcher) => file.on("close", () => watcher.close()),
                onChange: () => file.emit("rerun"),
            });
        }
        promise = adapter
            .build({ entryPoints, outfile })
            .then(() => {
            bundles.delete(filePath);
            return outfile;
        })
            .catch((error) => {
            bundles.delete(filePath);
            throw error;
        });
        bundles.set(filePath, promise);
        return promise;
    };
}
exports.cypressPreprocessor = cypressPreprocessor;
function cypressEsbuildPreprocessor(options) {
    return cypressPreprocessor(esbuildPreprocessorAdapter(options));
}
exports.cypressEsbuildPreprocessor = cypressEsbuildPreprocessor;
function watch(file, callback) {
    if (watching.has(file)) {
        return;
    }
    const emitter = fs.watch(file, { encoding: null }, (event) => {
        if (event === "change") {
            callback.onChange();
        }
    });
    callback.onInit(emitter);
    watching.add(file);
    emitter.on("close", () => {
        watching.delete(file);
    });
    emitter.on("error", (error) => {
        console.error(error);
        watching.delete(file);
    });
}
