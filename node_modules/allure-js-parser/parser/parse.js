"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAllure = exports.populateAllParents = exports.populateContainers = exports.populateTestResults = void 0;
const debug_1 = __importDefault(require("debug"));
const fs = __importStar(require("fs"));
const debug = (0, debug_1.default)('allure-js-parser:parse');
const PACK = '[allure-js-parser]';
// eslint-disable-next-line @typescript-eslint/no-var-requires
const glob = require('fast-glob');
// eslint-disable-next-line no-console
const debugLog = (...args) => debug(args);
const log = (...args) => console.log(`${PACK}`, ...args);
// eslint-disable-next-line no-console
const logError = (...args) => console.error(`${PACK}`, ...args);
function isResult(obj) {
    return !obj.children && obj.uuid && obj.name;
}
/**
 * Populate test results (without parent)
 * @param allureResultsPath - path to allure-results folder
 */
const populateTestResults = (allureResultsPath) => {
    const testCases = [];
    const resPattern = `${allureResultsPath}/*-result.json`;
    // get all tests first
    glob === null || glob === void 0 ? void 0 : glob.sync(resPattern).forEach((filePath) => {
        try {
            const fileContents = fs.readFileSync(filePath, 'utf8');
            const json = JSON.parse(fileContents);
            if (!isResult(json)) {
                return;
            }
            // steps: []
            testCases.push(Object.assign({}, json));
        }
        catch (err) {
            const e = err;
            logError(`Error reading: '${filePath}': ${e.message}`);
        }
    });
    return testCases;
};
exports.populateTestResults = populateTestResults;
/**
 * Populate containers results (without parents)
 * @param allureResultsPath - path to allure-results folder
 */
const populateContainers = (allureResultsPath) => {
    const containers = [];
    // get all tests first
    glob === null || glob === void 0 ? void 0 : glob.sync(`${allureResultsPath}/*-container.json`).forEach((containerPath) => {
        try {
            const containerText = fs.readFileSync(containerPath);
            const containerJson = JSON.parse(containerText.toString());
            containers.push(containerJson);
        }
        catch (err) {
            const e = err;
            logError(`Error reading: '${containerPath}': ${e.message}`);
        }
    });
    return containers;
};
exports.populateContainers = populateContainers;
/**
 * Find parent within containers
 * @param containers
 * @param target
 */
function populateAllParents(containers, target) {
    const container = containers.find(container => container.children.some(c => c.includes(target.uuid)));
    if (container) {
        target.parent = {
            uuid: container.uuid,
            name: container.name,
            befores: container.befores,
            afters: container.afters,
        };
        populateAllParents(containers, target.parent);
    }
}
exports.populateAllParents = populateAllParents;
/**
 * Populate tests parents
 * @param testCases - path to allure-results folder
 * @param containers - path to allure-results folder
 */
const populateParents = (testCases, containers) => testCases.map(test => {
    populateAllParents(containers, test);
    return test;
});
const exitWhenFailOnError = (failOnError, err) => {
    if (failOnError) {
        log('Exiting with status 1, to disable set failOnError=false in config');
        throw new Error(err);
    }
    else {
        logError(err);
    }
};
const parseAllure = (directoryPath, config) => {
    const env = process.env['failOnError'] !== undefined ? process.env.failOnError !== 'false' : false;
    const failOnError = (config === null || config === void 0 ? void 0 : config.failOnError) !== undefined ? config.failOnError : env;
    if (!fs.existsSync(directoryPath)) {
        exitWhenFailOnError(failOnError, `No allure-results folder: ${directoryPath}\n`);
        return [];
    }
    debugLog(`Reading ${directoryPath}...`);
    const pureTestCases = (0, exports.populateTestResults)(directoryPath);
    const containers = (0, exports.populateContainers)(directoryPath);
    if (pureTestCases.length === 0) {
        exitWhenFailOnError(failOnError, `No allure-results in folder (did you forgot to run tests?). Path '${directoryPath}'`);
        return [];
    }
    // got all tests, getting all parents for test
    const tests = populateParents(pureTestCases, containers);
    debugLog('Done');
    return tests;
};
exports.parseAllure = parseAllure;
